using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace kozzionmathematics.datastructure.k_d_tree
{

	// All the view classes are inefficient for anything other than iteration.
	/**
	 * <p>
	 * A k-d tree divides a k-dimensional space relative to the points it contains by storing them in a binary tree,
	 * discriminating by a different dimension at each level of the tree. It allows efficient point data retrieval (
	 * <em>O(lg(n))</em>) and range searching.
	 * </p>
	 * <p>
	 * KDTree conforms to the java.util.Map interface except that Iterator.remove is not supported by the returned views.
	 * </p>
	 */
	//TODO Make generic whatever the cost
	public class KDTreeGeneric<CoordinateType, LabellingType> : 
        IRangeSearchTree<CoordinateType, LabellingType>
		 where CoordinateType : IComparable<CoordinateType>
	{
		int                       d_size;
		int                       d_hash_code;
		private int         d_dimension_count;
		KdNode                    d_root_node;


		// Begin Map interface methods

		/**
		 * Removes all elements from the container, leaving it empty.
		 */
	



		/**
		 * Returns a Set view of the point to value mappings in the KDTree. Modifications to the resulting set will be
		 * reflected in the KDTree and vice versa, except that {@code Iterator.remove} is not supported.
		 * 
		 * @return A Set view of the point to value mappings in the KDTree.
		 */
		public Set<Tuple<CoordinateType, LabellingType>> entrySet()
		{
			return new MapEntrySet();
		}




		/**
		 * Returns a Set view of the point keys for the mappings in the KDTree. Changes to the Set are reflected in the
		 * KDTree and vice versa, except that {@code Iterator.remove} is not supported.
		 * 
		 * @return A Set view of the point keys for the mappings in the KDTree.
		 */
		public IEnumerable<CoordinateType []> keySet()
		{
			return new KeySet();
		}


		/**
		 * Copies all of the point-value mappings from the given Map into the KDTree.
		 * 
		 * @param map
		 *            The Map from which to copy the mappings.
		 */
		public void putAll(IEnumerable<Tuple<CoordinateType [], LabellingType>>  entries)
		{
			foreach ( Tuple<CoordinateType [], LabellingType> entry in entries)
			{
				put(entry.Item1, entry.Item2);
			}
		}

		

		/**
		 * Returns the number of point-value mappings in the KDTree.
		 * 
		 * @return The number of point-value mappings in the KDTree.
		 */
		public int Count {get{ return d_size}}

		/**
		 * Returns a Collection view of the values contained in the KDTree. Changes to the Collection are reflected in the
		 * KDTree and vice versa. Note: the resulting Collection is very inefficient.
		 * 
		 * @return A Collection view of the values contained in the KDTree.
		 */
		public ICollection<LabellingType> values()
		{
			return new ValueCollection();
		}

		// End Map interface methods
		public Iterator<Map.Entry<CoordinateListType, LabellingType>> iterator( CoordinateListType lower,  CoordinateListType upper)
		{
			return new MapEntryIterator(lower, upper);
		}

		int fillArray( KdNode [] a, int index,  KdNode node)
		{
			if (node == null)
			{
				return index;
			}
			a[index] = node;
			index = fillArray(a, index + 1, node.d_low);
			return fillArray(a, index, node.d_high);
		}

		

		/**
		 * Optimizes the performance of future search operations by balancing the KDTree. The balancing operation is
		 * relatively expensive, but can significantly improve the performance of searches. Usually, you don't have to
		 * optimize a tree which contains random key values inserted in a random order.
		 */
		public void optimize()
		{
			if (isEmpty())
			{
				return;
			}

			 KDNode<CoordinateType, LabellingType> [] nodes = new KDNode<CoordinateType, LabellingType>[Count];
			fillArray(nodes, 0, d_root_node);
			d_root_node = optimize(nodes, 0, nodes.Length, new NodeComparator());
		}

		 class NodeComparator : IComparer<KDNode<CoordinateType, LabellingType>>
		{
			private static  long serialVersionUID = 1L;

			private int                       _discriminator   = 0;

			void setDiscriminator( int val)
			{
				_discriminator = val;
			}

			int getDiscriminator()
			{
				return _discriminator;
			}


			public int Compare( KDNode<CoordinateType, LabellingType> n1,  KDNode<CoordinateType, LabellingType> n2)
			{
				return n1.d_point[_discriminator].CompareTo(n2.d_point.[_discriminator]);
			}
		}

		

		 

		 class KeyIterator : Iterator<CoordinateType>
		{
			MapEntryIterator iterator;

			KeyIterator( MapEntryIterator it)
			{
				iterator = it;
			}
			public bool hasNext()
			{
				return iterator.hasNext();
			}

			public CoordinateType next()
			{
				 Map.Entry<CoordinateListType, LabellingType> next = iterator.next();
				return (next == null ? null : next.getKey());
			}

	
			public void remove()
			{
				iterator.remove();
			}
		}

		 class ValueIterator : Iterator<LabellingType>
		{
			
		}

		abstract class CollectionView<E> : Collection<E>
		{

			public bool add( E o) throws UnsupportedOperationException
			{
				throw new UnsupportedOperationException();
			}

			@Override
			public boolean addAll( Collection<? extends E> c) throws UnsupportedOperationException
			{
				throw new UnsupportedOperationException();
			}

			@Override
			public void clear()
			{
				KDTreeGeneric.this.clear();
			}

			@Override
			public boolean containsAll( Collection<?> c)
			{
				for ( Object o : c)
				{
					if (!contains(o))
					{
						return false;
					}
				}
				return true;
			}

			@Override
			public int hashCode()
			{
				return KDTreeGeneric.this.hashCode();
			}

			@Override
			public boolean isEmpty()
			{
				return KDTreeGeneric.this.isEmpty();
			}

			@Override
			public int size()
			{
				return KDTreeGeneric.this.size();
			}

			@Override
			public Object [] toArray()
			{
				 Object [] obja = new Object [size()];
				int i = 0;

				for ( E e : this)
				{
					obja[i] = e;
					++i;
				}

				return obja;
			}

			@Override
			public <T> T [] toArray(T [] a)
			{
				Object [] array = a;

				if (array.length < size())
				{
					array = a = (T []) Array.newInstance(a.getClass().getComponentType(), size());
				}

				if (array.length > size())
				{
					array[size()] = null;
				}

				int i = 0;
				for ( E e : this)
				{
					array[i] = e;
					++i;
				}

				return a;
			}
		}

		abstract class SetView<E> extends CollectionView<E> implements Set<E>
		{
			@Override
			public boolean equals( Object other)
			{
				if (!(other instanceof Set))
				{
					return false;
				}

				if (other == this)
				{
					return true;
				}

				 Set<?> set = (Set<?>) other;

				if (set.size() != size())
				{
					return false;
				}

				try
				{
					return containsAll(set);
				}
				catch ( ClassCastException cce)
				{
					return false;
				}
			}
		}

		 class MapEntrySet extends SetView<Map.Entry<CoordinateListType, LabellingType>>
		{
			@Override
			public boolean contains( Object o) throws ClassCastException, NullPointerException
			{
				 Map.Entry<CoordinateListType, LabellingType> e = (Map.Entry<CoordinateListType, LabellingType>) o;
				 KdNode node = getNode(e.getKey());

				if (node == null)
				{
					return false;
				}

				return e.getValue().equals(node.getValue());
			}

			@Override
			public Iterator<Map.Entry<CoordinateListType, LabellingType>> iterator()
			{
				return new MapEntryIterator();
			}

			@Override
			public boolean remove( Object o) throws ClassCastException
			{
				 int size = size();
				 Map.Entry<CoordinateListType, LabellingType> e = (Map.Entry<CoordinateListType, LabellingType>) o;

				KDTreeGeneric.this.remove(e.getKey());

				return (size != size());
			}

			@Override
			public boolean removeAll( Collection<?> c) throws ClassCastException
			{
				 int size = size();

				for ( Object o : c)
				{
					 Map.Entry<CoordinateListType, LabellingType> e = (Map.Entry<CoordinateListType, LabellingType>) o;
					KDTreeGeneric.this.remove(e.getKey());
				}

				return (size != size());
			}

			@Override
			public boolean retainAll( Collection<?> c) throws ClassCastException
			{
				for ( Object o : c)
				{
					if (contains(o))
					{
						 Collection<Map.Entry<CoordinateListType, LabellingType>> col = (Collection<Map.Entry<CoordinateListType, LabellingType>>) c;
						clear();
						for ( Map.Entry<CoordinateListType, LabellingType> e : col)
						{
							put(e.getKey(), e.getValue());
						}
						return true;
					}
				}
				return false;
			}
		}

		 class KeySet extends SetView<CoordinateListType>
		{

			@Override
			public boolean contains( Object o) throws ClassCastException, NullPointerException
			{
				return KDTreeGeneric.this.containsKey(o);
			}

			@Override
			public Iterator<CoordinateListType> iterator()
			{
				return new KeyIterator(new MapEntryIterator());
			}

			@Override
			public boolean remove( Object o) throws ClassCastException
			{
				 int size = size();
				KDTreeGeneric.this.remove(o);
				return (size != size());
			}

			@Override
			public boolean removeAll( Collection<?> c) throws ClassCastException
			{
				 int size = size();

				for ( Object o : c)
				{
					KDTreeGeneric.this.remove(o);
				}

				return (size != size());
			}

			@Override
			public boolean retainAll( Collection<?> c) throws ClassCastException
			{
				 HashMap<CoordinateListType, LabellingType> map = new HashMap<CoordinateListType, LabellingType>();
				 int size = size();

				for ( Object o : c)
				{
					 LabellingType val = get(o);

					if ((val != null) || contains(o))
					{
						map.put((CoordinateListType) o, val);
					}
				}

				clear();
				putAll(map);

				return (size != size());
			}
		}

		 class ValueCollection extends CollectionView<LabellingType>
		{

			@Override
			public boolean contains( Object o) throws ClassCastException, NullPointerException
			{
				return KDTreeGeneric.this.containsValue(o);
			}

			@Override
			public Iterator<LabellingType> iterator()
			{
				return new ValueIterator(new MapEntryIterator());
			}

			@Override
			public boolean remove( Object o) throws ClassCastException
			{
				 KdNode node = findValue(d_root_node, o);

				if (node != null)
				{
					KDTreeGeneric.this.remove(node.getKey());
					return true;
				}

				return false;
			}

			@Override
			public boolean removeAll( Collection<?> c) throws ClassCastException
			{
				 int size = size();

				for ( Object o : c)
				{
					KdNode node = findValue(d_root_node, o);

					while (node != null)
					{
						KDTreeGeneric.this.remove(o);
						node = findValue(d_root_node, o);
					}
				}

				return (size != size());
			}

			@Override
			public boolean retainAll( Collection<?> c) throws ClassCastException
			{
				 HashMap<CoordinateListType, LabellingType> map = new HashMap<CoordinateListType, LabellingType>();
				 int size = size();

				for ( Object o : c)
				{
					KdNode node = findValue(d_root_node, o);

					while (node != null)
					{
						map.put(node.getKey(), node.getValue());
						node = findValue(d_root_node, o);
					}
				}

				clear();
				putAll(map);

				return (size != size());
			}
		}

		KdNode getNode( CoordinateListType point,  KdNode [] parent)
		{
			int discriminator;
			KdNode node = d_root_node, current, last = null;
			IValue c1;
			IValue c2;

			while (node != null)
			{
				discriminator = node.d_discriminator;
				c1 = point.get_coordinate(discriminator);
				c2 = node.d_point.get_coordinate(discriminator);
				current = node;

				if (c1.compareTo(c2) > 0)
				{
					node = node.d_high;
				}
				else
					if (c1.compareTo(c2) < 0)
					{
						node = node.d_low;
					}
					else
						if (node.d_point.equals(point))
						{
							if (parent != null)
							{
								parent[0] = last;
							}
							return node;
						}
						else
						{
							node = node.d_high;
						}

				last = current;
			}

			if (parent != null)
			{
				parent[0] = last;
			}

			return null;
		}

		KdNode getNode( CoordinateListType point)
		{
			return getNode(point, null);
		}

		KdNode getMinimumNode( KdNode node,  KdNode p,  int discriminator,  KdNode [] parent)
		{
			KdNode result;

			if (discriminator == node.d_discriminator)
			{
				if (node.d_low != null)
				{
					return getMinimumNode(node.d_low, node, discriminator, parent);
				}
				else
				{
					result = node;
				}
			}
			else
			{
				KdNode nlow = null, nhigh = null;
				 KdNode [] plow = new KDTreeGeneric.KdNode [1], phigh = new KDTreeGeneric.KdNode [1];

				if (node.d_low != null)
				{
					nlow = getMinimumNode(node.d_low, node, discriminator, plow);
				}

				if (node.d_high != null)
				{
					nhigh = getMinimumNode(node.d_high, node, discriminator, phigh);
				}

				if ((nlow != null) && (nhigh != null))
				{
					if (nlow.d_point.get_coordinate(discriminator).compareTo(nhigh.d_point.get_coordinate(discriminator)) < 0)
					{
						result = nlow;
						parent[0] = plow[0];
					}
					else
					{
						result = nhigh;
						parent[0] = phigh[0];
					}
				}
				else
					if (nlow != null)
					{
						result = nlow;
						parent[0] = plow[0];
					}
					else
						if (nhigh != null)
						{
							result = nhigh;
							parent[0] = phigh[0];
						}
						else
						{
							result = node;
						}
			}

			if (result == node)
			{
				parent[0] = p;
			}
			else
				if (node.d_point.get_coordinate(discriminator).compareTo(result.d_point.get_coordinate(discriminator)) < 0)
				{
					result = node;
					parent[0] = p;
				}

			return result;
		}

		KdNode recursiveRemoveNode( KdNode node)
		{
			int discriminator;

			if ((node.d_low == null) && (node.d_high == null))
			{
				return null;
			}
			else
			{
				discriminator = node.d_discriminator;
			}

			if (node.d_high == null)
			{
				node.d_high = node.d_low;
				node.d_low = null;
			}

			 KdNode [] parent = new KDTreeGeneric.KdNode [1];
			 KdNode newRoot = getMinimumNode(node.d_high, node, discriminator, parent);
			 KdNode child = recursiveRemoveNode(newRoot);

			if (parent[0].d_low == newRoot)
			{
				parent[0].d_low = child;
			}
			else
			{
				parent[0].d_high = child;
			}

			newRoot.d_low = node.d_low;
			newRoot.d_high = node.d_high;
			newRoot.d_discriminator = node.d_discriminator;

			return newRoot;
		}

		KdNode findValue( KdNode node,  Object value)
		{
			if ((node == null) || (value == null ? node.getValue() == null : value.equals(node.getValue())))
			{
				return node;
			}

			KdNode result;

			if ((result = findValue(node.d_low, value)) == null)
			{
				result = findValue(node.d_high, value);
			}

			return result;
		}

		boolean isInRange( CoordinateListType point,  CoordinateListType lower,  CoordinateListType upper)
		{
			IValue coordinate1 = null;
			IValue coordinate2 = null;
			IValue coordinate3 = null;

			if ((lower != null) || (upper != null))
			{
				 int dimensions = point.get_dimension_count();

				for (int i = 0; i < dimensions; ++i)
				{
					coordinate1 = point.get_coordinate(i);
					if (lower != null)
					{
						coordinate2 = lower.get_coordinate(i);
					}
					if (upper != null)
					{
						coordinate3 = upper.get_coordinate(i);
					}
					if (((coordinate2 != null) && (coordinate1.compareTo(coordinate2) < 0))
						|| ((coordinate3 != null) && (coordinate1.compareTo(coordinate3) > 0)))
					{
						return false;
					}
				}
			}
			return true;
		}

		public int get_dimension_count()
		{
			return d_dimension_count;
		}
	}
}
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace kozzionmathematics.datastructure.k_d_tree
{

	// All the view classes are inefficient for anything other than iteration.
	/**
	 * <p>
	 * A k-d tree divides a k-dimensional space relative to the points it contains by storing them in a binary tree,
	 * discriminating by a different dimension at each level of the tree. It allows efficient point data retrieval (
	 * <em>O(lg(n))</em>) and range searching.
	 * </p>
	 * <p>
	 * KDTree conforms to the java.util.Map interface except that Iterator.remove is not supported by the returned views.
	 * </p>
	 */
	//TODO Make generic whatever the cost
	public class KDTreeGeneric<CoordinateType, LabellingType> : 
        IRangeSearchTree<CoordinateType, LabellingType>
		 where CoordinateType : IComparable<CoordinateType>
	{
		int                       d_size;
		int                       d_hash_code;
		private int         d_dimension_count;
		KdNode                    d_root_node;

		/**
		 * Creates a KDTree of the specified number of dimensions.
		 * 
		 * @param dimensions
		 *            The number of dimensions. Must be greater than 0.
		 */
		public KDTreeGeneric( int dimensions)
		{
			Debug.Assert(dimensions > 0);
			d_dimension_count = dimensions;
			clear();
		}

		// Begin Map interface methods

		/**
		 * Removes all elements from the container, leaving it empty.
		 */
		public void clear()
		{
			d_root_node = null;
			d_size = d_hash_code = 0;
		}

		/**
		 * Returns true if the container contains a mapping for the specified key.
		 * 
		 * @param key
		 *            The point key to search for.
		 * @return true if the container contains a mapping for the specified key.
		 * @exception ClassCastException
		 *                if the key is not an instance of P.
		 */
		public bool containsKey( CoordinateType [] key)
		{
			return (getNode(key) != null); 
		}

		/**
		 * Returns true if the container contains a mapping with the specified value. Note: this is very inefficient for
		 * KDTrees because it requires searching the entire tree.
		 * 
		 * @param value
		 *            The value to search for.
		 * @return true If the container contains a mapping with the specified value.
		 */
		public bool containsValue( LabellingType value)
		{
			return (findValue(d_root_node, value) != null);
		}

		/**
		 * Returns a Set view of the point to value mappings in the KDTree. Modifications to the resulting set will be
		 * reflected in the KDTree and vice versa, except that {@code Iterator.remove} is not supported.
		 * 
		 * @return A Set view of the point to value mappings in the KDTree.
		 */
		public Set<Tuple<CoordinateType, LabellingType>> entrySet()
		{
			return new MapEntrySet();
		}

		/**
		 * Returns true if the object contains the same mappings, false if not.
		 * 
		 * @param o
		 *            The object to test for equality.
		 * @return true if the object contains the same mappings, false if not.
		 */
		public bool equals( Object other)
		{
			if (!(other is IRangeSearchTree<CoordinateType [], LabellingType>))
			{
				return false;
			}

			if (other == this)
			{
				return true;
			}
			return false;
			// Map<CoordinateListType, LabellingType> map = (Map<CoordinateListType, LabellingType>) object;
			//return (entrySet().equals(map.entrySet()));
		}

		/**
		 * Retrieves the value at the given location.
		 * 
		 * @param point
		 *            The location from which to retrieve the value.
		 * @return The value at the given location, or null if no value is present.
		 * @exception ClassCastException
		 *                If the given point is not of the expected type.
		 */
		public LabellingType get( CoordinateType [] point)
		{
			 KdNode node = getNode(point);
			if (node == null)
			{
				return default(LabellingType);
			}
			else
			{
				return node.getValue();
			}
		}

		/**
		 * Returns the hash code value for this map.
		 * 
		 * @return The sum of the hash codes of all of the map entries.
		 */
		public override int hashCode()
		{
			return d_hash_code;
		}

		/**
		 * Returns true if the container has no elements, false if it contains one or more elements.
		 * 
		 * @return true if the container has no elements, false if it contains one or more elements.
		 */
		public bool isEmpty()
		{
			return (d_root_node == null);
		}

		/**
		 * Returns a Set view of the point keys for the mappings in the KDTree. Changes to the Set are reflected in the
		 * KDTree and vice versa, except that {@code Iterator.remove} is not supported.
		 * 
		 * @return A Set view of the point keys for the mappings in the KDTree.
		 */
		public IEnumerable<CoordinateType []> keySet()
		{
			return new KeySet();
		}

		/**
		 * Inserts a point value pair into the tree, preserving the spatial ordering.
		 * 
		 * @param point
		 *            The point serving as a key.
		 * @param value
		 *            The value to insert at the point.
		 * @return The old value if an existing value is replaced by the inserted value.
		 */
		public LabellingType put( CoordinateType [] point,  LabellingType value)
		{
			KDNode<CoordinateType, LabellingType> [] parent = new KDNode<CoordinateType, LabellingType> [1];
			KDNode<CoordinateType, LabellingType> node = getNode(point, parent);
			LabellingType old = default(LabellingType);
			if (node != null)
			{
				old = node.getValue();
				d_hash_code -= node.GetHashCode();
				node.d_value = value;
			}
			else
			{
				if (parent[0] == null)
				{
					node = d_root_node = new KDNode<CoordinateType, LabellingType>(0, point, value);
				}
				else
				{
					 int discriminator = parent[0].d_discriminator;
					if (point[(discriminator].CompareTo(parent[0].d_point[discriminator]) >= 0)
					{
						node = parent[0].d_high = new KDNode<CoordinateType, LabellingType>((discriminator + 1) % d_dimension_count, point, value);
					}
					else
					{
						node = parent[0].d_low = new KDNode<CoordinateType, LabellingType>((discriminator + 1) % d_dimension_count, point, value);
					}
				}
				++d_size;
			}
			d_hash_code += node.GetHashCode();
			return old;
		}

		/**
		 * Copies all of the point-value mappings from the given Map into the KDTree.
		 * 
		 * @param map
		 *            The Map from which to copy the mappings.
		 */
		public void putAll(IEnumerable<Tuple<CoordinateType [], LabellingType>>  entries)
		{
			foreach ( Tuple<CoordinateType [], LabellingType> entry in entries)
			{
				put(entry.Item1, entry.Item2);
			}
		}

		/**
		 * Removes the point-value mapping corresponding to the given point key.
		 * 
		 * @param key
		 *            The point key of the mapping to remove.
		 * @return The value part of the mapping, if a mapping existed and was removed. Null if not.
		 * @exception ClassCastException
		 *                If the key is not an instance of P.
		 */
		public LabellingType remove( CoordinateType [] key)
		{
			 KdNode [] parent = new KDTreeGeneric.KdNode [1];
			KdNode node = getNode((CoordinateListType) key, parent);
			LabellingType old = null;

			if (node != null)
			{
				 KdNode child = node;

				node = recursiveRemoveNode(child);

				if (parent[0] == null)
				{
					d_root_node = node;
				}
				else
					if (child == parent[0].d_low)
					{
						parent[0].d_low = node;
					}
					else
						if (child == parent[0].d_high)
						{
							parent[0].d_high = node;
						}

				--d_size;
				d_hash_code -= child.hashCode();
				old = child.getValue();
			}

			return old;
		}

		/**
		 * Returns the number of point-value mappings in the KDTree.
		 * 
		 * @return The number of point-value mappings in the KDTree.
		 */
		public int Count {get{ return d_size}}

		/**
		 * Returns a Collection view of the values contained in the KDTree. Changes to the Collection are reflected in the
		 * KDTree and vice versa. Note: the resulting Collection is very inefficient.
		 * 
		 * @return A Collection view of the values contained in the KDTree.
		 */
		public ICollection<LabellingType> values()
		{
			return new ValueCollection();
		}

		// End Map interface methods
		public Iterator<Map.Entry<CoordinateListType, LabellingType>> iterator( CoordinateListType lower,  CoordinateListType upper)
		{
			return new MapEntryIterator(lower, upper);
		}

		int fillArray( KdNode [] a, int index,  KdNode node)
		{
			if (node == null)
			{
				return index;
			}
			a[index] = node;
			index = fillArray(a, index + 1, node.d_low);
			return fillArray(a, index, node.d_high);
		}

		KdNode optimize( KdNode [] nodes,  int begin,  int end,  NodeComparator comp)
		{
			KdNode midpoint = null;
			 int size = end - begin;

			if (size > 1)
			{
				int nth = begin + (size >> 1);
				int nthprev = nth - 1;
				int d = comp.getDiscriminator();

				Arrays.sort(nodes, begin, end, comp);

				while ((nth > begin) && (nodes[nth].d_point.get_coordinate(d).compareTo(nodes[nthprev].d_point.get_coordinate(d)) == 0))
				{
					--nth;
					--nthprev;
				}

				midpoint = nodes[nth];
				midpoint.d_discriminator = d;

				if (++d >= d_dimension_count)
				{
					d = 0;
				}

				comp.setDiscriminator(d);

				midpoint.d_low = optimize(nodes, begin, nth, comp);

				comp.setDiscriminator(d);

				midpoint.d_high = optimize(nodes, nth + 1, end, comp);
			}
			else
				if (size == 1)
				{
					midpoint = nodes[begin];
					midpoint.d_discriminator = comp.getDiscriminator();
					midpoint.d_low = midpoint.d_high = null;
				}
			return midpoint;
		}

		/**
		 * Optimizes the performance of future search operations by balancing the KDTree. The balancing operation is
		 * relatively expensive, but can significantly improve the performance of searches. Usually, you don't have to
		 * optimize a tree which contains random key values inserted in a random order.
		 */
		public void optimize()
		{
			if (isEmpty())
			{
				return;
			}

			 KDNode<CoordinateType, LabellingType> [] nodes = new KDNode<CoordinateType, LabellingType>[Count];
			fillArray(nodes, 0, d_root_node);
			d_root_node = optimize(nodes, 0, nodes.Length, new NodeComparator());
		}

		 class NodeComparator : IComparer<KDNode<CoordinateType, LabellingType>>
		{
			private static  long serialVersionUID = 1L;

			private int                       _discriminator   = 0;

			void setDiscriminator( int val)
			{
				_discriminator = val;
			}

			int getDiscriminator()
			{
				return _discriminator;
			}


			public int Compare( KDNode<CoordinateType, LabellingType> n1,  KDNode<CoordinateType, LabellingType> n2)
			{
				return n1.d_point[_discriminator].CompareTo(n2.d_point.[_discriminator]);
			}
		}

		

		 class MapEntryIterator : Iterator<Map.Entry<CoordinateListType, LabellingType>>
		{
			LinkedList<KdNode> _stack;
			KdNode             _next;
			CoordinateListType       _lower, _upper;

			MapEntryIterator( CoordinateListType lower,  CoordinateListType upper)
			{
				_stack = new LinkedList<KdNode>();
				_lower = lower;
				_upper = upper;
				_next = null;

				if (d_root_node != null)
				{
					_stack.addLast(d_root_node);
				}
				next();
			}

			MapEntryIterator()
			{
				this(null, null);
			}

			@Override
			public boolean hasNext()
			{
				return (_next != null);
			}

			@Override
			public Map.Entry<CoordinateListType, LabellingType> next()
			{
				 KdNode old = _next;

				while (!_stack.isEmpty())
				{
					 KdNode node = _stack.removeLast();
					 int discriminator = node.d_discriminator;

					if (((_upper == null) || (node.d_point.get_coordinate(discriminator).compareTo(_upper.get_coordinate(discriminator)) <= 0))
						&& (node.d_high != null))
					{
						_stack.addLast(node.d_high);
					}

					if (((_lower == null) || (node.d_point.get_coordinate(discriminator).compareTo(_lower.get_coordinate(discriminator)) > 0))
						&& (node.d_low != null))
					{
						_stack.addLast(node.d_low);
					}

					if (isInRange(node.d_point, _lower, _upper))
					{
						_next = node;
						return old;
					}
				}

				_next = null;

				return old;
			}

			// This violates the contract for entrySet, but we can't support
			// in a reasonable fashion the removal of mappings through the iterator.
			// Java iterators require a hasNext() function, which forces the stack
			// to reflect a future search state, making impossible to adjust the
			// current
			// stack after a removal. Implementation alternatives are all too
			// expensive. Yet another reason to favor the C++ implementation...
			@Override
			public void remove() throws UnsupportedOperationException
			{
				throw new UnsupportedOperationException();
			}
		}

		 class KeyIterator : Iterator<CoordinateType>
		{
			MapEntryIterator iterator;

			KeyIterator( MapEntryIterator it)
			{
				iterator = it;
			}
			public bool hasNext()
			{
				return iterator.hasNext();
			}

			public CoordinateType next()
			{
				 Map.Entry<CoordinateListType, LabellingType> next = iterator.next();
				return (next == null ? null : next.getKey());
			}

	
			public void remove()
			{
				iterator.remove();
			}
		}

		 class ValueIterator : Iterator<LabellingType>
		{
			MapEntryIterator iterator;

			ValueIterator( MapEntryIterator it)
			{
				iterator = it;
			}

			public boolean hasNext()
			{
				return iterator.hasNext();
			}


			public LabellingType next()
			{
				 Map.Entry<CoordinateListType, LabellingType> next = iterator.next();
				return (next == null ? null : next.getValue());
			}


			public void remove()
			{
				iterator.remove();
			}
		}

		abstract class CollectionView<E> : Collection<E>
		{

			public bool add( E o) throws UnsupportedOperationException
			{
				throw new UnsupportedOperationException();
			}

			@Override
			public boolean addAll( Collection<? extends E> c) throws UnsupportedOperationException
			{
				throw new UnsupportedOperationException();
			}

			@Override
			public void clear()
			{
				KDTreeGeneric.this.clear();
			}

			@Override
			public boolean containsAll( Collection<?> c)
			{
				for ( Object o : c)
				{
					if (!contains(o))
					{
						return false;
					}
				}
				return true;
			}

			@Override
			public int hashCode()
			{
				return KDTreeGeneric.this.hashCode();
			}

			@Override
			public boolean isEmpty()
			{
				return KDTreeGeneric.this.isEmpty();
			}

			@Override
			public int size()
			{
				return KDTreeGeneric.this.size();
			}

			@Override
			public Object [] toArray()
			{
				 Object [] obja = new Object [size()];
				int i = 0;

				for ( E e : this)
				{
					obja[i] = e;
					++i;
				}

				return obja;
			}

			@Override
			public <T> T [] toArray(T [] a)
			{
				Object [] array = a;

				if (array.length < size())
				{
					array = a = (T []) Array.newInstance(a.getClass().getComponentType(), size());
				}

				if (array.length > size())
				{
					array[size()] = null;
				}

				int i = 0;
				for ( E e : this)
				{
					array[i] = e;
					++i;
				}

				return a;
			}
		}

		abstract class SetView<E> extends CollectionView<E> implements Set<E>
		{
			@Override
			public boolean equals( Object other)
			{
				if (!(other instanceof Set))
				{
					return false;
				}

				if (other == this)
				{
					return true;
				}

				 Set<?> set = (Set<?>) other;

				if (set.size() != size())
				{
					return false;
				}

				try
				{
					return containsAll(set);
				}
				catch ( ClassCastException cce)
				{
					return false;
				}
			}
		}

		 class MapEntrySet extends SetView<Map.Entry<CoordinateListType, LabellingType>>
		{
			@Override
			public boolean contains( Object o) throws ClassCastException, NullPointerException
			{
				 Map.Entry<CoordinateListType, LabellingType> e = (Map.Entry<CoordinateListType, LabellingType>) o;
				 KdNode node = getNode(e.getKey());

				if (node == null)
				{
					return false;
				}

				return e.getValue().equals(node.getValue());
			}

			@Override
			public Iterator<Map.Entry<CoordinateListType, LabellingType>> iterator()
			{
				return new MapEntryIterator();
			}

			@Override
			public boolean remove( Object o) throws ClassCastException
			{
				 int size = size();
				 Map.Entry<CoordinateListType, LabellingType> e = (Map.Entry<CoordinateListType, LabellingType>) o;

				KDTreeGeneric.this.remove(e.getKey());

				return (size != size());
			}

			@Override
			public boolean removeAll( Collection<?> c) throws ClassCastException
			{
				 int size = size();

				for ( Object o : c)
				{
					 Map.Entry<CoordinateListType, LabellingType> e = (Map.Entry<CoordinateListType, LabellingType>) o;
					KDTreeGeneric.this.remove(e.getKey());
				}

				return (size != size());
			}

			@Override
			public boolean retainAll( Collection<?> c) throws ClassCastException
			{
				for ( Object o : c)
				{
					if (contains(o))
					{
						 Collection<Map.Entry<CoordinateListType, LabellingType>> col = (Collection<Map.Entry<CoordinateListType, LabellingType>>) c;
						clear();
						for ( Map.Entry<CoordinateListType, LabellingType> e : col)
						{
							put(e.getKey(), e.getValue());
						}
						return true;
					}
				}
				return false;
			}
		}

		 class KeySet extends SetView<CoordinateListType>
		{

			@Override
			public boolean contains( Object o) throws ClassCastException, NullPointerException
			{
				return KDTreeGeneric.this.containsKey(o);
			}

			@Override
			public Iterator<CoordinateListType> iterator()
			{
				return new KeyIterator(new MapEntryIterator());
			}

			@Override
			public boolean remove( Object o) throws ClassCastException
			{
				 int size = size();
				KDTreeGeneric.this.remove(o);
				return (size != size());
			}

			@Override
			public boolean removeAll( Collection<?> c) throws ClassCastException
			{
				 int size = size();

				for ( Object o : c)
				{
					KDTreeGeneric.this.remove(o);
				}

				return (size != size());
			}

			@Override
			public boolean retainAll( Collection<?> c) throws ClassCastException
			{
				 HashMap<CoordinateListType, LabellingType> map = new HashMap<CoordinateListType, LabellingType>();
				 int size = size();

				for ( Object o : c)
				{
					 LabellingType val = get(o);

					if ((val != null) || contains(o))
					{
						map.put((CoordinateListType) o, val);
					}
				}

				clear();
				putAll(map);

				return (size != size());
			}
		}

		 class ValueCollection extends CollectionView<LabellingType>
		{

			@Override
			public boolean contains( Object o) throws ClassCastException, NullPointerException
			{
				return KDTreeGeneric.this.containsValue(o);
			}

			@Override
			public Iterator<LabellingType> iterator()
			{
				return new ValueIterator(new MapEntryIterator());
			}

			@Override
			public boolean remove( Object o) throws ClassCastException
			{
				 KdNode node = findValue(d_root_node, o);

				if (node != null)
				{
					KDTreeGeneric.this.remove(node.getKey());
					return true;
				}

				return false;
			}

			@Override
			public boolean removeAll( Collection<?> c) throws ClassCastException
			{
				 int size = size();

				for ( Object o : c)
				{
					KdNode node = findValue(d_root_node, o);

					while (node != null)
					{
						KDTreeGeneric.this.remove(o);
						node = findValue(d_root_node, o);
					}
				}

				return (size != size());
			}

			@Override
			public boolean retainAll( Collection<?> c) throws ClassCastException
			{
				 HashMap<CoordinateListType, LabellingType> map = new HashMap<CoordinateListType, LabellingType>();
				 int size = size();

				for ( Object o : c)
				{
					KdNode node = findValue(d_root_node, o);

					while (node != null)
					{
						map.put(node.getKey(), node.getValue());
						node = findValue(d_root_node, o);
					}
				}

				clear();
				putAll(map);

				return (size != size());
			}
		}

		KdNode getNode( CoordinateListType point,  KdNode [] parent)
		{
			int discriminator;
			KdNode node = d_root_node, current, last = null;
			IValue c1;
			IValue c2;

			while (node != null)
			{
				discriminator = node.d_discriminator;
				c1 = point.get_coordinate(discriminator);
				c2 = node.d_point.get_coordinate(discriminator);
				current = node;

				if (c1.compareTo(c2) > 0)
				{
					node = node.d_high;
				}
				else
					if (c1.compareTo(c2) < 0)
					{
						node = node.d_low;
					}
					else
						if (node.d_point.equals(point))
						{
							if (parent != null)
							{
								parent[0] = last;
							}
							return node;
						}
						else
						{
							node = node.d_high;
						}

				last = current;
			}

			if (parent != null)
			{
				parent[0] = last;
			}

			return null;
		}

		KdNode getNode( CoordinateListType point)
		{
			return getNode(point, null);
		}

		KdNode getMinimumNode( KdNode node,  KdNode p,  int discriminator,  KdNode [] parent)
		{
			KdNode result;

			if (discriminator == node.d_discriminator)
			{
				if (node.d_low != null)
				{
					return getMinimumNode(node.d_low, node, discriminator, parent);
				}
				else
				{
					result = node;
				}
			}
			else
			{
				KdNode nlow = null, nhigh = null;
				 KdNode [] plow = new KDTreeGeneric.KdNode [1], phigh = new KDTreeGeneric.KdNode [1];

				if (node.d_low != null)
				{
					nlow = getMinimumNode(node.d_low, node, discriminator, plow);
				}

				if (node.d_high != null)
				{
					nhigh = getMinimumNode(node.d_high, node, discriminator, phigh);
				}

				if ((nlow != null) && (nhigh != null))
				{
					if (nlow.d_point.get_coordinate(discriminator).compareTo(nhigh.d_point.get_coordinate(discriminator)) < 0)
					{
						result = nlow;
						parent[0] = plow[0];
					}
					else
					{
						result = nhigh;
						parent[0] = phigh[0];
					}
				}
				else
					if (nlow != null)
					{
						result = nlow;
						parent[0] = plow[0];
					}
					else
						if (nhigh != null)
						{
							result = nhigh;
							parent[0] = phigh[0];
						}
						else
						{
							result = node;
						}
			}

			if (result == node)
			{
				parent[0] = p;
			}
			else
				if (node.d_point.get_coordinate(discriminator).compareTo(result.d_point.get_coordinate(discriminator)) < 0)
				{
					result = node;
					parent[0] = p;
				}

			return result;
		}

		KdNode recursiveRemoveNode( KdNode node)
		{
			int discriminator;

			if ((node.d_low == null) && (node.d_high == null))
			{
				return null;
			}
			else
			{
				discriminator = node.d_discriminator;
			}

			if (node.d_high == null)
			{
				node.d_high = node.d_low;
				node.d_low = null;
			}

			 KdNode [] parent = new KDTreeGeneric.KdNode [1];
			 KdNode newRoot = getMinimumNode(node.d_high, node, discriminator, parent);
			 KdNode child = recursiveRemoveNode(newRoot);

			if (parent[0].d_low == newRoot)
			{
				parent[0].d_low = child;
			}
			else
			{
				parent[0].d_high = child;
			}

			newRoot.d_low = node.d_low;
			newRoot.d_high = node.d_high;
			newRoot.d_discriminator = node.d_discriminator;

			return newRoot;
		}

		KdNode findValue( KdNode node,  Object value)
		{
			if ((node == null) || (value == null ? node.getValue() == null : value.equals(node.getValue())))
			{
				return node;
			}

			KdNode result;

			if ((result = findValue(node.d_low, value)) == null)
			{
				result = findValue(node.d_high, value);
			}

			return result;
		}

		boolean isInRange( CoordinateListType point,  CoordinateListType lower,  CoordinateListType upper)
		{
			IValue coordinate1 = null;
			IValue coordinate2 = null;
			IValue coordinate3 = null;

			if ((lower != null) || (upper != null))
			{
				 int dimensions = point.get_dimension_count();

				for (int i = 0; i < dimensions; ++i)
				{
					coordinate1 = point.get_coordinate(i);
					if (lower != null)
					{
						coordinate2 = lower.get_coordinate(i);
					}
					if (upper != null)
					{
						coordinate3 = upper.get_coordinate(i);
					}
					if (((coordinate2 != null) && (coordinate1.compareTo(coordinate2) < 0))
						|| ((coordinate3 != null) && (coordinate1.compareTo(coordinate3) > 0)))
					{
						return false;
					}
				}
			}
			return true;
		}

		public int get_dimension_count()
		{
			return d_dimension_count;
		}
	}
}